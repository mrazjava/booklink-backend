name: Backend-CI

on:
  push:
    branches:
      - master
    tags:
      - v1
    paths:
      - 'booklink-backend/*'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Maven Build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Use JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Maven Package
      working-directory: booklink-backend
      run: mvn -B clean package --file pom.xml
    - name: Upload Maven build artifact
      uses: actions/upload-artifact@v1
      with:
        name: artifact
        path: booklink-backend/target/booklink-backend.jar
  dockerize:
    runs-on: ubuntu-latest
    name: Dockerize
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven build artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact
      - name: Build Docker Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          mkdir -p target
          mv ../artifact/booklink-backend.jar target/
          docker build -t "$GITHUB_REPOSITORY:$IMAGE_TAG" .
        working-directory: booklink-backend
  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    name: Deploy to AWS
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: booklink
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        working-directory: booklink-backend
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/booklink-backend-task-definition.json
          container-name: booklink-backend
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: booklink-backend-service
          cluster: booklink
          wait-for-service-stability: true