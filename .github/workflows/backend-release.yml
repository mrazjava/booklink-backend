name: Backend-release-CI

on:
  push:
    branches:
      - master
    tags:
      - v1
    paths:
      - 'booklink-backend/*'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Maven Master Build
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Use JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Maven Package
      working-directory: booklink-backend
      run: mvn -B clean package --file pom.xml
    - name: Upload Maven build artifact
      uses: actions/upload-artifact@v1
      with:
        name: artifact
        path: booklink-backend/target/booklink-backend.jar
  publish:
    runs-on: ubuntu-latest
    name: Prepare Docker Image
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Download Maven build artifact
        uses: actions/download-artifact@v1
        with:
          name: artifact
      - name: Build Docker Image
        working-directory: booklink-backend
        env:
          IMAGE_TAG: backend-master-$(echo `date '+%Y%m%d%H%M%S'`)
        run: |
          mkdir -p target
          mv ../artifact/booklink-backend.jar target/
          docker login -u mrazjava -p ${{ secrets.GITHUB_PACKAGES }} docker.pkg.github.com
          docker build -t docker.pkg.github.com/mrazjava/booklink/$IMAGE_TAG .
      - name: Publish Image to Github Packages
        run: |
          docker push docker.pkg.github.com/mrazjava/booklink/backend-master
  deploy:
    runs-on: ubuntu-latest
    needs: publish
    name: Deploy to AWS
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Pull prepared image
        id: pull-image-from-github
        run: |
          # pull image we just built from github packages
          docker login -u mrazjava -p ${{ secrets.GITHUB_PACKAGES }} docker.pkg.github.com
          docker pull docker.pkg.github.com/mrazjava/booklink/booklink_backend
      - name: Push image to Amazon ECR
        id: push-image-to-aws
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: booklink
          #IMAGE_TAG: ${{ github.sha }}
        run: |
          # Push image to ECR so that it can be deployed to ECS.
          docker tag docker.pkg.github.com/mrazjava/booklink/booklink_backend $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
